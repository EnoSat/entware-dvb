diff -ruNp scan-s2.orig/dump-m3u.c scan-s2/dump-m3u.c
--- scan-s2.orig/dump-m3u.c	1970-01-01 03:00:00.000000000 +0300
+++ scan-s2/dump-m3u.c	2017-03-27 23:55:19.640211539 +0300
@@ -0,0 +1,267 @@
+/*
+For SATIP
+
+#EXTM3U
+#EXTINF:-1,01 ПЕРВЫЙ КАНАЛ
+http://192.168.31.11:8080/?freq=546&bw=8&msys=dvbt2&pids=0,1010,1011,1012,1014
+#EXTINF:-1,02 РОССИЯ-1
+http://192.168.31.11:8080/?freq=546&bw=8&msys=dvbt2&plp=1&pids=0,1020,1021,1022,1024
+
+For VLC
+
+#EXTM3U
+#EXTINF:-1,01 ПЕРВЫЙ КАНАЛ
+#EXTVLCOPT:dvb-plp-id=0
+#EXTVLCOPT:dvb-bandwidth=8
+#EXTVLCOPT:dvb-ts-id=1
+#EXTVLCOPT:dvb-transmission=32
+#EXTVLCOPT:dvb-guard=1/16
+#EXTVLCOPT:program=1010
+dvb-t2://frequency=546000000
+*/
+
+#include <stdio.h>
+#include <string.h>
+#include <ctype.h>
+
+#include "dump-m3u.h"
+#include "scan.h"
+
+static int start_header_m3u = 0;
+
+static const char *inv_name [] = {
+	"0",
+	"1",
+	"999" /* INVERSION_AUTO */
+};
+
+static const char *bw_name [] = {
+	"8",
+	"7",
+	"6",
+	"999", /* BANDWIDTH_AUTO */
+	"5",
+	"10",
+	"2" /* 1.712 in VLC not support */
+};
+
+static const char *rate_name [] = {
+	"0",
+	"1/2",
+	"2/3",
+	"3/4",
+	"4/5",
+	"5/6",
+	"6/7",
+	"7/8",
+	"8/9",
+	"999", /* FEC_AUTO */
+	"3/5",
+	"9/10",
+	"2/5"
+};
+
+static const char *gi_name [] = {
+	"1/32",
+	"1/16",
+	"1/8",
+	"1/4",
+	"999", /* GUARD_INTERVAL_AUTO */
+	"1/128",
+	"19/128",
+	"19/256",
+	"0",
+	"0",
+	"0"
+};
+
+static const char *transmission_name [] = {
+	"2",
+	"8",
+	"999", /* TRANSMISSION_MODE_AUTO */
+	"4",
+	"1",
+	"16",
+	"32",
+	"0",
+	"0"
+};
+
+static const char *mod_name [] = {
+	"QPSK",
+	"16QAM",
+	"32QAM",
+	"64QAM",
+	"128QAM",
+	"256QAM",
+	"QAM", /* QAM_AUTO */
+	"8VSB",
+	"16VSB",
+	"8PSK",
+	"16APSK",
+	"32APSK",
+	"DQPSK",
+	"NONE" /* QAM_4_NR */
+};
+
+static const char *rolloff_name [] = {
+	"35",
+	"20",
+	"25",
+	"999" /* ROLLOFF_AUTO */
+};
+
+static const char *hierarchy_name [] = {
+	"0",
+	"1",
+	"2",
+	"4",
+	"999" /* HIERARCHY_AUTO  */
+};
+
+#ifndef POLARIZATION_CIRCULAR_LEFT
+#define POLARIZATION_CIRCULAR_LEFT 2
+#endif
+
+static char sat_polarisation(transponder_t *t)
+{
+	if(t->polarisation == POLARIZATION_CIRCULAR_LEFT)
+		return 'h';
+	return t->polarisation == POLARISATION_HORIZONTAL ? 'h' : 'v';
+}
+
+void m3u_dvb_parameters (FILE *f, transponder_t *t, int use_url)
+{
+	switch (t->delivery_system) {
+		case SYS_DVBS:
+		case SYS_DVBS2:
+			if(use_url) {
+				fprintf (f, "freq=%i&", t->frequency / 1000000);
+				if(t->bandwidth != BANDWIDTH_AUTO)
+					fprintf (f, "bw=%s&", bw_name[t->bandwidth]);
+				fprintf (f, "sr=%i&", t->symbol_rate / 1000);
+				fprintf (f, "pol=%c&", sat_polarisation(t));
+				if ((t->delivery_system == SYS_DVBS2) && (t->stream_id != NO_STREAM_ID_FILTER))
+					fprintf (f, "plp=%d&", ((t->pls_mode & 0x3) << 26) |
+							((t->pls_code & 0x3ffff) << 8) |
+							(t->stream_id & 0xff));
+				fprintf (f, "msys=%s&", t->delivery_system == SYS_DVBS2 ? "dvbs2" : "dvbs");
+			} else {
+				fprintf (f, "#EXTVLCOPT:dvb-ts-id=%i\n", t->transport_stream_id);
+				if ((t->delivery_system == SYS_DVBS2) && (t->stream_id != NO_STREAM_ID_FILTER))
+					fprintf (f, "#EXTVLCOPT:dvb-plp-id=%d\n", ((t->pls_mode & 0x3) << 26) |
+							((t->pls_code & 0x3ffff) << 8) |
+							(t->stream_id & 0xff));
+				if(t->symbol_rate > 0)
+					fprintf (f, "#EXTVLCOPT:dvb-srate=%i\n", t->symbol_rate / 1000);
+				fprintf (f, "#EXTVLCOPT:dvb-polarization=%c\n", (char)toupper((int)sat_polarisation(t)));
+				if(t->bandwidth != BANDWIDTH_AUTO)
+					fprintf (f, "#EXTVLCOPT:dvb-bandwidth=%s\n", bw_name[t->bandwidth]);
+				if(t->transmission_mode != TRANSMISSION_MODE_AUTO)
+					fprintf (f, "#EXTVLCOPT:dvb-transmission=%s\n", transmission_name[t->transmission_mode]);
+				if(t->guard_interval != GUARD_INTERVAL_AUTO)
+					fprintf (f, "#EXTVLCOPT:dvb-guard=%s\n", gi_name[t->guard_interval]);
+				if (t->inversion != INVERSION_AUTO)
+					fprintf (f, "#EXTVLCOPT:dvb-inversion=%s\n", inv_name[t->inversion]);
+				if ((t->modulation != QAM_AUTO) && (t->modulation != QAM_4_NR))
+					fprintf (f, "#EXTVLCOPT:dvb-modulation=%s\n", mod_name[t->modulation]);
+				if (t->fec != FEC_AUTO)
+					fprintf (f, "#EXTVLCOPT:dvb-fec=%s\n", rate_name[t->fec]);
+				if (t->rolloff != ROLLOFF_AUTO)
+					fprintf (f, "#EXTVLCOPT:dvb-rolloff=%s\n", rolloff_name[t->rolloff]);
+				fprintf (f, "%s://frequency=%i\n", t->delivery_system == SYS_DVBS2 ? "dvb-s2" : "dvb-s", t->frequency);
+			}
+			break;
+
+		case SYS_DVBC_ANNEX_AC:
+		case SYS_DVBC_ANNEX_B:
+			if(use_url) {
+				fprintf (f, "freq=%i&", t->frequency / 1000000);
+				fprintf (f, "sr=%i&", t->symbol_rate / 1000);
+				if(t->bandwidth != BANDWIDTH_AUTO)
+					fprintf (f, "bw=%s&", bw_name[t->bandwidth]);
+				if (t->inversion != INVERSION_AUTO)
+					fprintf (f, "specinv=%s&", inv_name[t->inversion]);
+				fprintf (f, "msys=%s&", t->delivery_system == SYS_DVBC_ANNEX_B ? "dvbcb" : "dvbc");
+			} else {
+				fprintf (f, "#EXTVLCOPT:dvb-ts-id=%i\n", t->transport_stream_id);
+				if(t->symbol_rate > 0)
+					fprintf (f, "#EXTVLCOPT:dvb-srate=%i\n", t->symbol_rate / 1000);
+				if (t->inversion != INVERSION_AUTO)
+					fprintf (f, "#EXTVLCOPT:dvb-inversion=%s\n", inv_name[t->inversion]);
+				if ((t->modulation != QAM_AUTO) && (t->modulation != QAM_4_NR))
+					fprintf (f, "#EXTVLCOPT:dvb-modulation=%s\n", mod_name[t->modulation]);
+				fprintf (f, "dvb-c://frequency=%i\n", t->frequency);
+			}
+			break;
+
+		case SYS_DVBT:
+		case SYS_DVBT2:
+			if(use_url) {
+				fprintf (f, "freq=%i&", t->frequency / 1000000);
+				if(t->bandwidth != BANDWIDTH_AUTO)
+					fprintf (f, "bw=%s&", bw_name[t->bandwidth]);
+				if((t->delivery_system == SYS_DVBT2) && (t->stream_id > 0))
+					fprintf (f, "plp=%d&", t->stream_id);
+				fprintf (f, "msys=%s&", t->delivery_system == SYS_DVBT2 ? "dvbt2" : "dvbt");
+			} else {
+				fprintf (f, "#EXTVLCOPT:dvb-ts-id=%i\n", t->transport_stream_id);
+				if ((t->delivery_system == SYS_DVBT) && (t->hierarchy != HIERARCHY_AUTO) && (t->hierarchy != HIERARCHY_NONE))
+					fprintf (f, "#EXTVLCOPT:dvb-hierarchy=%s\n", hierarchy_name[t->modulation]);
+				if ((t->delivery_system == SYS_DVBT) && (t->inversion != INVERSION_AUTO))
+					fprintf (f, "#EXTVLCOPT:dvb-inversion=%s\n", inv_name[t->inversion]);
+				if ((t->modulation != QAM_AUTO) && (t->modulation != QAM_4_NR))
+					fprintf (f, "#EXTVLCOPT:dvb-modulation=%s\n", mod_name[t->modulation]);
+				if((t->delivery_system == SYS_DVBT2) && (t->stream_id > 0))
+					fprintf (f, "#EXTVLCOPT:dvb-plp-id=%d\n", t->stream_id);
+				if(t->bandwidth != BANDWIDTH_AUTO)
+					fprintf (f, "#EXTVLCOPT:dvb-bandwidth=%s\n", bw_name[t->bandwidth]);
+				if(t->transmission_mode != TRANSMISSION_MODE_AUTO)
+					fprintf (f, "#EXTVLCOPT:dvb-transmission=%s\n", transmission_name[t->transmission_mode]);
+				if(t->guard_interval != GUARD_INTERVAL_AUTO)
+					fprintf (f, "#EXTVLCOPT:dvb-guard=%s\n", gi_name[t->guard_interval]);
+				if ((t->delivery_system == SYS_DVBT) && ((t->fecHP != FEC_AUTO) && (t->fecHP != FEC_NONE)))
+					fprintf (f, "#EXTVLCOPT:dvb-code-rate-hp=%s\n", rate_name[t->fecHP]);
+				if ((t->delivery_system == SYS_DVBT) && ((t->fecLP != FEC_AUTO) && (t->fecLP != FEC_NONE)))
+					fprintf (f, "#EXTVLCOPT:dvb-code-rate-lp=%s\n", rate_name[t->fecLP]);
+				fprintf (f, "%s://frequency=%i\n", t->delivery_system == SYS_DVBT2 ? "dvb-t2" : "dvb-t", t->frequency);
+			}
+			break;
+
+		default:
+			break;
+	}
+}
+
+void m3u_dump_service_parameter_set (FILE *f, service_t *s, transponder_t *t, unsigned char *url)
+{
+	int i;
+
+	if(!start_header_m3u)
+	{
+		fprintf (f, "#EXTM3U\n");
+		start_header_m3u = 1;
+	}
+
+	fprintf (f, "#EXTINF:-1,%s\n", s->service_name);
+
+	if(url && (strlen(url) > 10))
+	{
+		fprintf (f, "%s/?src=1&", url); /* "src" is DiSEqC=1(A) */
+
+		m3u_dvb_parameters (f, t, 1);
+
+		fprintf (f, "pids=0,%i,%i", s->service_id, s->audio_pid[0]);
+		for (i = 1; i < s->audio_num; i++)
+			fprintf (f, ",%i", s->audio_pid[i]);
+		if(s->video_pid > 0)
+			fprintf (f, ",%i", s->video_pid);
+		if(s->teletext_pid > 0)
+			fprintf (f, ",%i", s->teletext_pid);
+		fprintf (f, "\n");
+	} else {
+		fprintf (f, "#EXTVLCOPT:program=%i\n", s->service_id);
+
+		m3u_dvb_parameters (f, t, 0);
+	}
+}
diff -ruNp scan-s2.orig/dump-m3u.h scan-s2/dump-m3u.h
--- scan-s2.orig/dump-m3u.h	1970-01-01 03:00:00.000000000 +0300
+++ scan-s2/dump-m3u.h	2017-03-27 23:55:19.640211539 +0300
@@ -0,0 +1,10 @@
+#ifndef __DUMP_M3U_H__
+#define __DUMP_M3U_H__
+
+#include <stdint.h>
+
+#include "scan.h"
+
+extern void m3u_dump_service_parameter_set (FILE *f, service_t *s, transponder_t *t, unsigned char *url);
+
+#endif
diff -ruNp scan-s2.orig/Makefile scan-s2/Makefile
--- scan-s2.orig/Makefile	2017-03-27 23:56:52.745889792 +0300
+++ scan-s2/Makefile	2017-03-27 23:55:19.640211539 +0300
@@ -1,8 +1,8 @@
 # CC=gcc
 
-SRC=atsc_psip_section.c diseqc.c dump-vdr.c dump-zap.c lnb.c scan.c section.c 
-HED=atsc_psip_section.h diseqc.h dump-vdr.h dump-zap.h lnb.h scan.h section.h list.h
-OBJ=atsc_psip_section.o diseqc.o dump-vdr.o dump-zap.o lnb.o scan.o section.o
+SRC=atsc_psip_section.c diseqc.c dump-vdr.c dump-zap.c dump-m3u.c lnb.c scan.c section.c 
+HED=atsc_psip_section.h diseqc.h dump-vdr.h dump-zap.h dump-m3u.h lnb.h scan.h section.h list.h
+OBJ=atsc_psip_section.o diseqc.o dump-vdr.o dump-zap.o dump-m3u.o lnb.o scan.o section.o
 
 BIND=/opt/usr/bin/
 INCLUDE=-I./include
diff -ruNp scan-s2.orig/scan.c scan-s2/scan.c
--- scan-s2.orig/scan.c	2017-03-27 23:57:02.141649187 +0300
+++ scan-s2/scan.c	2017-03-27 23:55:19.644211442 +0300
@@ -39,6 +39,7 @@
 #include "diseqc.h"
 #include "dump-zap.h"
 #include "dump-vdr.h"
+#include "dump-m3u.h"
 #include "scan.h"
 #include "lnb.h"
 
@@ -133,10 +134,15 @@ static int rotor_pos = 0;
 static int curr_rotor_pos = 0;
 static char rotor_pos_name[16] = "";
 static char override_orbital_pos[16] = "";
+static char url[256] = "";
 enum format output_format = OUTPUT_VDR;
 static int output_format_set = 0;
 static int disable_s1 = FALSE;
 static int disable_s2 = FALSE;
+static int fix_dvbt2_delivery_system = SYS_DVBT;
+static char mplp_id[256][1];
+static int lock_mplp_id = 0;
+static int scan_mplp_enable = 0;
 
 static rotorslot_t rotor[49];
 
@@ -175,6 +181,14 @@ static void add_filter (struct section_b
 
 static const char * fe_type2str(fe_type_t t);
 
+static void init_mplp_id(void)
+{
+	int i;
+
+	for(i = 0; i < 256; i++)
+		mplp_id[i][0] = -1;
+}
+
 /* According to the DVB standards, the combination of network_id and
 * transport_stream_id should be unique, but in real life the satellite
 * operators and broadcasters don't care enough to coordinate
@@ -591,7 +605,7 @@ static void parse_terrestrial_delivery_s
 		return;
 	}
 
-	t->delivery_system = SYS_DVBT;
+	t->delivery_system = fix_dvbt2_delivery_system;
 
 	t->frequency = (buf[2] << 24) | (buf[3] << 16);
 	t->frequency |= (buf[4] << 8) | buf[5];
@@ -1002,6 +1016,15 @@ static int find_descriptor(uint8_t tag,
 	return 0;
 }
 
+static void add_plp_id(const unsigned char *buf)
+{
+	int i = buf[3] & 0xff;
+	if(lock_mplp_id)
+		return;
+	info("Found PLP ID = %d\n", i);
+	mplp_id[i][0] = 1;
+}
+
 static void parse_descriptors(enum table_type t, const unsigned char *buf,
 							  int descriptors_loop_len, void *data)
 {
@@ -1042,6 +1065,18 @@ static void parse_descriptors(enum table
 				parse_s2_satellite_delivery_system_descriptor (buf, data);
 			break;
 
+		case 0x7f:
+			/* McMCC */
+			if (t == NIT) {
+				switch(buf[2]) {
+					case 0x04: /* DVB-T2 delivery system descriptor */
+					case 0x0d: /* DVB-C2 delivery system descriptor */
+						add_plp_id(buf);
+						break;
+				}
+			}
+			break;
+
 		case 0x44:
 			if (t == NIT)
 				parse_cable_delivery_system_descriptor (buf, data);
@@ -1961,6 +1996,8 @@ static int __tune_to_transponder (int fr
 		dprintf(1, "\n");
 	}
 
+	fix_dvbt2_delivery_system = SYS_DVBT;
+
 	switch(t->delivery_system) 
 	{
 	case SYS_DVBS:
@@ -2170,6 +2207,8 @@ static int __tune_to_transponder (int fr
 			info ("status %02x | signal strength %3u%% | snr %3u%% | ber %d | unc %d\n",
 				s, (strength * 100) / 0xffff, (snr * 100) / 0xffff, ber, ucblocks);
 
+			fix_dvbt2_delivery_system = t->delivery_system;
+
 			return 0;
 		}
 	}
@@ -2234,6 +2273,24 @@ static int tune_to_transponder (int fron
 	return __tune_to_transponder (frontend_fd, t);
 }
 
+static int t_stream_id = -1;
+static struct transponder *tw = NULL;
+
+static int get_mplp_id(void)
+{
+	int i;
+
+	for(i = 1; i < 256; i++) {
+		if(mplp_id[i][0] == 1) {
+			mplp_id[i][0] = -1;
+			lock_mplp_id = 1;
+			return i;
+		}
+	}
+	lock_mplp_id = 0;
+	return -1;
+}
+
 static int tune_to_next_transponder (int frontend_fd)
 {
 	struct list_head *pos, *tmp;
@@ -2241,11 +2298,27 @@ static int tune_to_next_transponder (int
 	uint32_t freq;
 	int rc;
 
+	if(scan_mplp_enable && (t_stream_id = get_mplp_id()) > 0) {
+		goto retry;
+	}
+
 	list_for_each_safe(pos, tmp, &new_transponders) {
-		t = list_entry (pos, struct transponder, list);
+		tw = list_entry (pos, struct transponder, list);
+
 retry:
+		if(scan_mplp_enable && t_stream_id > 0) {
+			t = calloc(1, sizeof(*t));
+			t->frequency = tw->frequency;
+			t->stream_id = t_stream_id;
+			INIT_LIST_HEAD(&t->list);
+			INIT_LIST_HEAD(&t->services);
+			list_add_tail(&t->list, &scanned_transponders);
+			copy_transponder(t, tw, TRUE);
+			tw = t;
+		} else
+			tw = list_entry (pos, struct transponder, list);
 
-		rc = tune_to_transponder(frontend_fd, t);
+		rc = tune_to_transponder(frontend_fd, tw);
 
 		if (rc == 0) {
 			return 0;
@@ -2255,25 +2328,25 @@ retry:
 			return -2;
 		}
 next:
-		if (t->other_frequency_flag && t->other_f && t->n_other_f) {
+		if (tw->other_frequency_flag && tw->other_f && tw->n_other_f) {
 			/* check if the alternate freqeuncy is really new to us */
-			freq = t->other_f[t->n_other_f - 1];
-			t->n_other_f--;
+			freq = tw->other_f[tw->n_other_f - 1];
+			tw->n_other_f--;
 
 			if (find_transponder_by_freq(freq))
 				goto next;
 
 			/* remember tuning to the old frequency failed */
 			to = calloc(1, sizeof(*to));
-			to->frequency = t->frequency;
+			to->frequency = tw->frequency;
 			to->wrong_frequency = 1;
 			INIT_LIST_HEAD(&to->list);
 			INIT_LIST_HEAD(&to->services);
 			list_add_tail(&to->list, &scanned_transponders);
-			copy_transponder(to, t, FALSE);
+			copy_transponder(to, tw, FALSE);
 
-			t->frequency = freq;
-			info("retrying with f=%d\n", t->frequency);
+			tw->frequency = freq;
+			info("retrying with f=%d\n", tw->frequency);
 
 			goto retry;
 		}
@@ -2900,6 +2973,8 @@ static void scan_network (int frontend_f
 		return;
 	}
 
+	init_mplp_id();
+
 	do {
 		scan_tp(frontend_fd);
 		do {
@@ -2999,6 +3074,10 @@ static void dump_lists (void)
 				zap_dump_service_parameter_set (stdout, s, t, sat_number(t));
 				break;
 
+			case OUTPUT_M3U:
+				m3u_dump_service_parameter_set (stdout, s, t, url);
+				break;
+
 			default:
 				break;
 			}
@@ -3061,7 +3140,9 @@ static const char *usage = "\n"
 "		messages of each message type (default 0)\n"
 "	-I cnt	Scan iterations count (default 10).\n"
 "		Larger number will make scan longer on every channel\n"
-"	-o fmt	output format: 'vdr' (default), 'vdr16x' for VDR version 1.6.x or 'zap'\n"
+"	-M	Scan with support Multiple-PLP (DVB-T2 only)\n"
+"	-H url	Generation M3U playlist for SATIP, use as 'http://host:port', 'rtsp://host[:port]' or 'satip://host[:port]'\n"
+"	-o fmt	output format: 'm3u', 'vdr' (default), 'vdr16x' for VDR version 1.6.x or 'zap'\n"
 "	-x N	Conditional Access, (default -1)\n"
 "		N=-2  gets all channels (FTA and encrypted),\n"
 "		      output received CAID :CAID:\n"
@@ -3141,7 +3222,7 @@ int main (int argc, char **argv)
 
 	/* start with default lnb type */
 	lnb_type = *lnb_enum(0);
-	while ((opt = getopt(argc, argv, "5cnXpa:f:d:O:k:I:S:s:r:R:o:D:x:t:i:l:vquPA:U")) != -1) {
+	while ((opt = getopt(argc, argv, "5cnMXpa:f:d:O:k:I:S:s:r:R:H:o:D:x:t:i:l:vquPA:U")) != -1) {
 		switch (opt) 
 		{
 		case 'a':
@@ -3162,6 +3243,10 @@ int main (int argc, char **argv)
 			noauto = 1;
 			break;
 
+		case 'M':
+			scan_mplp_enable = 1;
+			break;
+
 		case 'd':
 			demux = strtoul(optarg, NULL, 0);
 			break;
@@ -3206,6 +3291,7 @@ int main (int argc, char **argv)
 			if      (strcmp(optarg, "zap") == 0) output_format = OUTPUT_ZAP;
 			else if (strcmp(optarg, "vdr") == 0) output_format = OUTPUT_VDR;
 			else if (strcmp(optarg, "vdr16x") == 0) output_format = OUTPUT_VDR_16x;
+			else if (strcmp(optarg, "m3u") == 0) output_format = OUTPUT_M3U;
 			else {
 				bad_usage(argv[0], 0);
 				return -1;
@@ -3213,6 +3299,15 @@ int main (int argc, char **argv)
 			output_format_set = 1;
 			break;
 
+		case 'H':
+			if(!strncmp(optarg, "http://", 7) || !strncmp(optarg, "rtsp://", 7) || !strncmp(optarg, "satip://", 8))
+				strncpy(url, optarg, sizeof(url)-1);
+			else {
+				bad_usage(argv[0], 0);
+				return -1;
+			}
+			break;
+
 		case 'D':
 			if      (strcmp(optarg, "S1") == 0) disable_s1 = TRUE;
 			else if (strcmp(optarg, "S2") == 0) disable_s2 = TRUE;
@@ -3392,11 +3487,12 @@ int main (int argc, char **argv)
 
 static void dump_dvb_parameters (FILE *f, struct transponder *t)
 {
-	switch (output_format) 
+	switch (output_format)
 	{
 	case OUTPUT_VDR:
 	case OUTPUT_VDR_16x:
-		vdr_dump_dvb_parameters(f, t, override_orbital_pos);	
+	case OUTPUT_M3U:
+		vdr_dump_dvb_parameters(f, t, override_orbital_pos);
 		break;
 
 	case OUTPUT_ZAP:
diff -ruNp scan-s2.orig/scan.h scan-s2/scan.h
--- scan-s2.orig/scan.h	1970-01-01 02:59:59.000000000 +0300
+++ scan-s2/scan.h	2017-03-27 23:55:19.644211442 +0300
@@ -49,7 +49,8 @@ extern int verbosity;
 enum format {
 	OUTPUT_ZAP,
 	OUTPUT_VDR,
-	OUTPUT_VDR_16x
+	OUTPUT_VDR_16x,
+	OUTPUT_M3U
 };
 
 enum running_mode {
